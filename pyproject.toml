[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["."]

[project]
name = "spellcasters"
version = "1.0.0"
description = "A hackathon game challenge where participants program bots to battle in a turn-based, wizard-themed strategy arena"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Spellcasters Team" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.9"
dependencies = [
    "pygame>=2.6.0",
    "pydantic>=2.11.0",
    "torch>=2.1.0",
    "numpy>=1.24.0",
    "matplotlib>=3.7.0",
    "tqdm>=4.65.0",
    "azure-ai-ml>=1.12.0",
    "azure-identity>=1.15.0",
    "python-dotenv>=1.0.0",
    # FastAPI Backend Dependencies
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "sqlmodel>=0.0.14",
    "aiosqlite>=0.19.0",
    "httpx>=0.25.0",
    "pytest-asyncio>=0.23.0",
    "pydantic-settings>=2.1.0",
    "greenlet>=3.0.0",
]

[project.scripts]
spellcasters = "main:main"

[project.urls]
Homepage = "https://github.com/your-org/spellcasters"
Repository = "https://github.com/your-org/spellcasters"
Issues = "https://github.com/your-org/spellcasters/issues"

[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "ruff>=0.12.5",
]

[tool.ruff]
target-version = "py39"
line-length = 120

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "ARG002", # unused-method-args
    "ARG003", # unused-class-method-args
    "ARG004", # unused-static-method-args
    "ARG005", # unused-lambda-args
    "D",   # pydocstyle
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "RUF", # Ruff-specific rules
]
ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["D", "ARG", "S101"]
"**/conftest.py" = ["D"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "venv/*",
    ".venv/*",
    "*/site-packages/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/*_test.py"] 
